{"version":3,"sources":["components/Header.js","components/Table.js","services/UserService.js","components/DataDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Table","userColumns","columns","data","useTable","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","visibleColumns","state","expanded","getDataset","row","labels","datasets","label","backgroundColor","borderColor","borderWidth","Object","values","original","association_score","datatypes","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","Fragment","getRowProps","cells","cell","getCellProps","isExpanded","colSpan","length","options","title","display","text","fontSize","legend","position","a","fetch","response","json","DataDisplay","useState","setData","getAllUser","getAllUsers","then","res","sort","b","overall","slice","useEffect","Chart","register","CategoryScale","Styles","styled","div","React","useMemo","id","Cell","getToggleRowExpandedProps","SubCell","accessor","d","target","gene_info","symbol","e","href","value","name","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e91b9e75.chunk.js","sourcesContent":["import React from 'react'\n\nexport function Header() {\n    return(\n        <div className=\"header\">\n            <h1>Open Targets Platform - mini</h1>\n        </div>\n    )\n}","import { useExpanded, useTable } from 'react-table';\r\nimport {Bar, getDatasetAtEvent} from 'react-chartjs-2';\r\nimport React  from 'react';\r\n\r\nexport function Table({ columns: userColumns, data }) {\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n      visibleColumns,\r\n      state: { expanded },\r\n    } = useTable(\r\n      {\r\n        columns: userColumns,\r\n        data,\r\n      },\r\n      useExpanded\r\n    )\r\n\r\n    \r\n    function getDataset(row) {\r\n     \r\n     \r\n        return { labels: ['literature', 'rna_expression', 'genetic_association',\r\n                  'somatic_mutation', 'known_drug','animal_model','affected_pathway'],\r\n         datasets: [\r\n           {\r\n             label: 'Association score vs Data Type',\r\n             backgroundColor: '#3489ca',\r\n             borderColor: 'rgba(0,0,0,1)',\r\n             borderWidth: 2,\r\n             data: Object.values(row.original.association_score.datatypes)\r\n           }\r\n         ]\r\n       }\r\n     }\r\n  \r\n    return (\r\n      <>\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row)\r\n              return (\r\n                <React.Fragment {...row.getRowProps()}>\r\n                  <tr>\r\n                    {row.cells.map(cell => {\r\n                      return (\r\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                      )\r\n                    })}\r\n                  </tr>\r\n                  {row.isExpanded ? (\r\n                    <tr>\r\n                      <td colSpan={visibleColumns.length}>\r\n\r\n                      <Bar\r\n                          data={getDataset(row)}\r\n                          options={{\r\n                            title:{\r\n                              display:true,\r\n                              text:'Average Rainfall per month',\r\n                              fontSize:1\r\n                            },\r\n                            legend:{\r\n                              display:true,\r\n                              position:'right'\r\n                            }\r\n                          }}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  ) : null}\r\n                </React.Fragment>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        <div>Showing the first 5 results of {rows.length} rows</div>\r\n      </>\r\n    )\r\n  }","\nexport async function getAllUsers() {\n\n    const response = await fetch('/api/get');\n    return await response.json();\n}\n\nexport async function createUser(data) {\n    const response = await fetch(`/api/user`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n      })\n    return await response.json();\n}","import React, { useState, useEffect } from 'react';\r\nimport Chart from 'chart.js/auto'\r\nimport styled from 'styled-components';\r\nimport {CategoryScale} from 'chart.js';\r\nimport { Table } from './Table';\r\nimport { getAllUsers } from '.././services/UserService'\r\n\r\nexport function DataDisplay() {\r\n\r\n  const [count, setCount] = useState(0);\r\n  const [data1 , setData1] = useState([]);\r\n  const [data , setData] = useState([]);\r\n\r\n function getAllUser() {\r\n    getAllUsers()\r\n      .then(res => {\r\n        const { data } = res;\r\n        data.sort(( a, b) => b.association_score.overall - a.association_score.overall);\r\n        setData(data.slice(0,4));\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllUser();\r\n  }, []);\r\n\r\n\r\n  Chart.register(CategoryScale);\r\n \r\n\r\nconst Styles = styled.div`\r\n        padding: 1rem;\r\n        table {\r\n          border-spacing: 0;\r\n          border: 1px solid black;\r\n\r\n          tr {\r\n            :last-child {\r\n              td {\r\n                border-bottom: 0;\r\n              }\r\n            }\r\n          }\r\n\r\n          th,\r\n          td {\r\n            margin: 0;\r\n            padding: 0.5rem;\r\n            border-bottom: 1px solid black;\r\n            border-right: 1px solid black;\r\n\r\n            :last-child {\r\n              border-right: 0;\r\n            }\r\n          }\r\n        }\r\n      `;\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      { \r\n        Header: () => null,\r\n        id: 'expander',\r\n        Cell: ({ row }) => (\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n            {row.isExpanded ? '-' : '+'}\r\n          </span>\r\n        ),\r\n        SubCell: () => null\r\n      },\r\n      {\r\n        Header: 'Approved Symbol',\r\n            accessor: (d) => d.target.gene_info.symbol,\r\n            Cell: e =><a href={'https://platform.opentargets.org/target/'+e.row.original.target.id} target=\"_blank\"> {e.value} </a>\r\n      },\r\n      {\r\n        Header: 'Gene Name',\r\n        accessor: (d) => d.target.gene_info.name\r\n      },\r\n      {\r\n        Header: 'Association score',\r\n        accessor: (d) => d.association_score.overall\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n\r\n  return (\r\n    <div>\r\n    <Styles>\r\n    <h3>Genes associated with lung carcinoma</h3>\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n      />\r\n    </Styles>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Header } from './components/Header'\nimport  { DataDisplay }  from './components/DataDisplay'\n\nfunction App() {\n\n  const [user,setUser] = useState({});\n  const [users,setUsers] = useState([]);\n  const [numberOfUsers,setNumberOfUsers] = useState(0);\n  \n  return (\n      <>\n       <div className=\"container mrgnbtm\">\n        <Header></Header>\n        <DataDisplay></DataDisplay>\n      </div>\n      </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}